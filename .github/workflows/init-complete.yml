name: Initialize Complete

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  actions: write
  issues: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number }}
  cancel-in-progress: false

jobs:
  validate_and_setup:
    name: Validate and setup repository
    if: |
      github.event.issue.state == 'open' &&
      contains(github.event.issue.labels.*.name, 'initialization') &&
      github.event.comment.user.login != 'github-actions[bot]' &&
      vars.IS_TEMPLATE != 'true'
    runs-on: ubuntu-latest
    outputs:
      upstream_repo: ${{ steps.validate.outputs.upstream_repo }}
      should_proceed: ${{ steps.validate.outputs.should_proceed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Template Repository Protection Check
        id: template_check
        uses: ./.github/local-actions/template-protection-check
        with:
          is_template_var: ${{ vars.IS_TEMPLATE }}
          github_is_template: ${{ github.event.repository.is_template }}

      - name: Block if template
        if: steps.template_check.outputs.is_template == 'true'
        run: |
          echo "🛡️ BLOCKED: This workflow is blocked in template development repositories"
          echo "The IS_TEMPLATE variable is set to 'true', which prevents initialization workflows from running."
          echo "This is a safety mechanism to prevent accidental initialization of the template repository itself."
          echo ""
          echo "If you're trying to test initialization:"
          echo "1. Create a test repository from this template"
          echo "2. Run the initialization workflow in that repository instead"
          exit 1

      - name: Re-checkout for validation
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}  # Standard token: Checkout operations

      - name: Validate upstream repository
        id: validate
        uses: ./.github/local-actions/validate-upstream-repo
        with:
          comment_body: ${{ github.event.comment.body }}
          issue_number: ${{ github.event.issue.number }}
          github_token: ${{ secrets.GITHUB_TOKEN }}  # Standard token: Posting issue comments

      - name: Set UPSTREAM_REPO_URL Variable
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}  # Required: Setting repository variables needs admin permission
        run: |
          REPO="${{ steps.validate.outputs.upstream_repo }}"
          if [[ "$REPO" == http* ]]; then
            REPO_URL="$REPO.git"
          else
            REPO_URL="https://github.com/$REPO.git"
          fi
          echo "Setting UPSTREAM_REPO_URL variable to: $REPO_URL"
          echo "URL length: ${#REPO_URL}"
          if [ -n "$GH_TOKEN" ]; then
            if ! GH_TOKEN=$GH_TOKEN gh variable set UPSTREAM_REPO_URL --body "$REPO_URL"; then
              echo "Failed to set UPSTREAM_REPO_URL variable"
            fi
          else
            echo "GH_TOKEN not available, skipping variable configuration"
          fi

  setup_repository:
    name: Setup Repository
    needs: validate_and_setup
    if: needs.validate_and_setup.outputs.should_proceed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}  # Standard token: Checkout operations

      - name: Configure Git
        uses: ./.github/local-actions/configure-git
        with:
          pull_rebase: 'false'

      - name: Upstream Repository
        uses: ./.github/local-actions/init-helpers
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Standard token: Git operations and posting comments
        with:
          operation: setup-upstream
          github_token: ${{ secrets.GITHUB_TOKEN }}  # Standard token: Git operations and posting comments
          upstream_repo: ${{ needs.validate_and_setup.outputs.upstream_repo }}
          issue_number: ${{ github.event.issue.number }}
          
      - name: Configure Variables
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}  # Required: Setting repository variables needs admin permission
          REPO_URL: ${{ env.REPO_URL }}
        run: |
          # Set repository variables using GH_TOKEN (required for admin operations)
          VARIABLES_SUCCESS=true
          if [ -n "$GH_TOKEN" ]; then
            echo "Setting UPSTREAM_REPO_URL variable to: $REPO_URL"
            echo "URL length: ${#REPO_URL}"
            if ! GH_TOKEN=$GH_TOKEN gh variable set UPSTREAM_REPO_URL --body "$REPO_URL"; then
              echo "Failed to set UPSTREAM_REPO_URL variable"
              VARIABLES_SUCCESS=false
            fi
            
            # Configure GitHub Copilot firewall allowlist if configuration exists
            if [ -f ".github/fork-resources/copilot-firewall-config.json" ]; then
              echo "Configuring GitHub Copilot firewall allowlist..."
              FIREWALL_DOMAINS=$(jq -r '.firewall_additions | join(",")' .github/fork-resources/copilot-firewall-config.json)
              if [ -n "$FIREWALL_DOMAINS" ] && [ "$FIREWALL_DOMAINS" != "null" ]; then
                echo "Setting COPILOT_AGENT_FIREWALL_ALLOW_LIST_ADDITIONS to: $FIREWALL_DOMAINS"
                if ! GH_TOKEN=$GH_TOKEN gh variable set COPILOT_AGENT_FIREWALL_ALLOW_LIST_ADDITIONS --body "$FIREWALL_DOMAINS"; then
                  echo "Failed to set COPILOT_AGENT_FIREWALL_ALLOW_LIST_ADDITIONS variable"
                  VARIABLES_SUCCESS=false
                fi
              fi
            fi
          else
            echo "GH_TOKEN not available, skipping variable configuration"
            VARIABLES_SUCCESS=false
          fi
          echo "VARIABLES_SUCCESS=$VARIABLES_SUCCESS" >> $GITHUB_ENV

      - name: Branch Structure
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Standard token: Used for git operations only
        run: |
          # Check if this is an OSDU partition repository (for debugging)
          if [[ "${{ needs.validate_and_setup.outputs.upstream_repo }}" == *"partition"* ]]; then
            # List release branches for OSDU repos (internal logging only)
            RELEASE_BRANCHES=$(git branch -r | grep upstream/release | sed 's/upstream\///' | tr '\n' ', ')
            if [ -n "$RELEASE_BRANCHES" ]; then
              echo "Debug: Found release branches: $RELEASE_BRANCHES"
            fi
          fi
          
          # Create fork_upstream from upstream's default branch
          git checkout -b fork_upstream upstream/$DEFAULT_BRANCH
          
          # Try to push with error handling for push protection
          echo "::notice::Pushing fork_upstream branch..."

          # Capture both stdout and stderr, and preserve exit code
          set +e  # Don't exit on command failure
          git push -u origin fork_upstream 2>&1 | tee push_output.txt
          PUSH_EXIT_CODE=${PIPESTATUS[0]}
          set -e  # Re-enable exit on error

          if [ $PUSH_EXIT_CODE -ne 0 ]; then
            # Use push protection handler action
            echo "Push failed, checking for push protection violation..."
            echo "PUSH_EXIT_CODE=$PUSH_EXIT_CODE" >> $GITHUB_ENV
          else
            echo "::notice::Successfully pushed fork_upstream branch"
            echo "PUSH_EXIT_CODE=0" >> $GITHUB_ENV
          fi

      - name: Handle fork_upstream push protection
        if: env.PUSH_EXIT_CODE != '0'
        uses: ./.github/local-actions/secret-push-handler
        with:
          push_output_file: push_output.txt
          issue_number: ${{ github.event.issue.number }}
          upstream_repo: ${{ needs.validate_and_setup.outputs.upstream_repo }}
          github_token: ${{ secrets.GITHUB_TOKEN }}  # Standard token: Posting issue comments

      - name: Exit if fork_upstream push failed
        if: env.PUSH_EXIT_CODE != '0'
        run: exit 1

      - name: Continue branch setup
        if: env.PUSH_EXIT_CODE == '0'
        run: |
          # Create fork_integration from fork_upstream
          git checkout -b fork_integration fork_upstream

          # Restore local actions from main branch since fork_integration lacks template's local actions
          git checkout main -- .github/local-actions

      - name: Apply sync configuration
        if: env.PUSH_EXIT_CODE == '0'
        uses: ./.github/local-actions/sync-config-applier
        with:
          sync_config_path: '.github/sync-config.json'
          source_branch: 'main'
          template_repo_url: ${{ vars.TEMPLATE_REPO_URL || 'https://github.com/azure/osdu-spi.git' }}

      - name: Push fork_integration branch
        if: env.PUSH_EXIT_CODE == '0'
        run: |
          # Push fork_integration with error handling
          echo "::notice::Pushing fork_integration branch..."
          set +e
          git push -u origin fork_integration 2>&1 | tee push_integration_output.txt
          PUSH_INTEGRATION_EXIT_CODE=${PIPESTATUS[0]}
          set -e

          if [ $PUSH_INTEGRATION_EXIT_CODE -ne 0 ]; then
            echo "::error::fork_integration push failed"
            echo "::notice::This is expected if the upstream repository contains secrets"
            echo "::notice::The same allowlist URLs from the previous error will resolve this issue"
            echo "PUSH_INTEGRATION_EXIT_CODE=$PUSH_INTEGRATION_EXIT_CODE" >> $GITHUB_ENV
          else
            echo "::notice::Successfully pushed fork_integration branch"
            echo "PUSH_INTEGRATION_EXIT_CODE=0" >> $GITHUB_ENV
          fi

      - name: Handle fork_integration push protection
        if: env.PUSH_INTEGRATION_EXIT_CODE != '0'
        uses: ./.github/local-actions/secret-push-handler
        with:
          push_output_file: push_integration_output.txt
          issue_number: ${{ github.event.issue.number }}
          upstream_repo: ${{ needs.validate_and_setup.outputs.upstream_repo }}
          github_token: ${{ secrets.GITHUB_TOKEN }}  # Standard token: Posting issue comments

      - name: Exit if fork_integration push failed
        if: env.PUSH_INTEGRATION_EXIT_CODE != '0'
        run: exit 1

      - name: Final branch setup
        if: env.PUSH_INTEGRATION_EXIT_CODE == '0'
        run: echo "✅ Both branches successfully created"

      - name: Merge to Main
        uses: ./.github/local-actions/merge-with-theirs-resolution
        with:
          source_branch: fork_integration
          target_branch: main
          commit_message: "chore: complete repository initialization"
          issue_number: ${{ github.event.issue.number }}
          github_token: ${{ secrets.GITHUB_TOKEN }}  # Standard token: Git merge operations and posting comments

      - name: Finalize Initialization
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Standard token: Available but not used (GH_TOKEN required for workflows)
          GH_TOKEN: ${{ secrets.GH_TOKEN }}  # Required: Pushing workflow files needs 'workflows' permission + setting variables needs admin
        run: |
          # Copy workflows from template-workflows before deploy-fork-resources deletes the directory
          echo "Deploying production workflows from template..."
          if [ -d ".github/template-workflows" ]; then
            mkdir -p .github/workflows
            cp .github/template-workflows/*.yml .github/workflows/ 2>/dev/null || true
            echo "✅ Template workflows copied"
          else
            echo "⚠️  Warning: .github/template-workflows directory not found"
          fi

          # Deploy fork-specific resources and clean up template files
          ./.github/local-actions/init-helpers/deploy-fork-resources.sh

          # Add all changes to the merge commit
          git add -A
          if ! git diff --staged --quiet; then
            git commit --amend --no-edit
          fi

          # Push using GH_TOKEN if available (needed for workflow permissions)
          if [ -n "$GH_TOKEN" ]; then
            echo "Pushing to main using GH_TOKEN (required for workflow deployment)..."
            git push https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git main
          else
            echo "::error::GH_TOKEN not available - cannot push workflows without it"
            echo "::error::Workflows require a Personal Access Token with 'workflow' scope"
            exit 1
          fi
          
          # Set repository variable for initialization status
          if [ -n "$GH_TOKEN" ]; then
            GH_TOKEN=$GH_TOKEN gh variable set INITIALIZATION_COMPLETE --body "true"
          fi

      - name: Branch Protection
        uses: ./.github/local-actions/init-helpers
        with:
          operation: setup-branch-protection
          github_token: ${{ secrets.GH_TOKEN }}  # Required: Branch protection rules need admin permission
          repo_full_name: ${{ github.repository }}
          issue_number: ${{ github.event.issue.number }}

      - name: Configure Security
        uses: ./.github/local-actions/init-helpers
        with:
          operation: setup-security
          github_token: ${{ secrets.GH_TOKEN }}  # Required: Security settings need admin permission
          repo_full_name: ${{ github.repository }}
          issue_number: ${{ github.event.issue.number }}

      - name: Update Status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Standard token: Posting issue comments
        run: |
          # Build status lines based on success flags
          if [ "$BRANCH_PROTECTION_SUCCESS" = "true" ]; then
            PROTECTION_STATUS="**Branch Protection:** main and fork_upstream protected, fork_integration allows direct pushes"
          else
            PROTECTION_STATUS="⚠️ **Branch Protection:** Requires manual setup"
          fi

          if [ "$VARIABLES_SUCCESS" = "true" ]; then
            VARIABLE_STATUS="**Repository Variables:** UPSTREAM_REPO_URL and GitHub Copilot firewall allowlist configured"
          else
            VARIABLE_STATUS="⚠️ **Repository Variables:** Requires manual setup (including Copilot firewall allowlist)"
          fi

          if [ "$SECURITY_SUCCESS" = "true" ]; then
            SECURITY_STATUS="**Security Features:** Secret scanning, dependency updates, and GitHub Copilot automatic code review enabled"
          else
            SECURITY_STATUS="⚠️ **Security Features:** Requires manual setup"
          fi

          # Assemble manual steps if needed
          MANUAL_STEPS=""
          if [ "$BRANCH_PROTECTION_SUCCESS" != "true" ] || [ "$VARIABLES_SUCCESS" != "true" ] || [ "$SECURITY_SUCCESS" != "true" ]; then
            MANUAL_STEPS="## Manual Configuration Required

          Some features require manual setup:
          "
            [ "$BRANCH_PROTECTION_SUCCESS" != "true" ] && MANUAL_STEPS+="$(cat .github/local-actions/templates/manual-steps/branch-protection.md)"$'\n'
            [ "$VARIABLES_SUCCESS" != "true" ] && MANUAL_STEPS+="$(cat .github/local-actions/templates/manual-steps/repository-variables.md)"$'\n'
            [ "$SECURITY_SUCCESS" != "true" ] && MANUAL_STEPS+="$(cat .github/local-actions/templates/manual-steps/security-features.md)"$'\n'
          fi

          # Read template and substitute placeholders
          MESSAGE=$(cat .github/local-actions/templates/initialization-complete.md)
          MESSAGE="${MESSAGE//\{PROTECTION_STATUS\}/$PROTECTION_STATUS}"
          MESSAGE="${MESSAGE//\{VARIABLE_STATUS\}/$VARIABLE_STATUS}"
          MESSAGE="${MESSAGE//\{SECURITY_STATUS\}/$SECURITY_STATUS}"
          MESSAGE="${MESSAGE//\{MANUAL_STEPS\}/$MANUAL_STEPS}"
          MESSAGE="${MESSAGE//\{UPSTREAM_REPO\}/${{ needs.validate_and_setup.outputs.upstream_repo }}}"

          # Post completion message
          echo "$MESSAGE" | gh issue comment "${{ github.event.issue.number }}" --body-file -

      - name: Create MCP Configuration Issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Standard token: Creating issues
        run: |
          gh issue create \
            --title "Configure MCP Server for GitHub Copilot Agent" \
            --body-file .github/local-actions/templates/mcp-setup-issue.md \
            --label "human-required"

          echo "Created MCP configuration issue"

      - name: Complete Initialization
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Standard token: Closing issues
        run: |
          # Close the initialization issue
          gh issue close "${{ github.event.issue.number }}" --reason completed